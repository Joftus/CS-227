package hw4;
import java.awt.Color;
import api.Block;
import api.Cell;
import api.Position;
import api.Shape;
import examples.SampleShape;

// Joshua Loftus ComSci 227 Section A
public class IShape extends AbstractShape
	{
	
	protected Position position;
	protected Cell[] cells;
	private int transformCount = 4;
	private Color color = Color.CYAN;
	
	
	
	public IShape(Position givenPosition, boolean magic)
		{
		position = givenPosition;
		cells = new Cell[3];
		cells[0] = new Cell(new Block(color, magic), givenPosition);
		Position position2 = new Position(givenPosition.row() + 1, givenPosition.col());
		cells[1] = new Cell(new Block(color, false), position2);
		Position position3 = new Position(position2.row() + 1, position2.col());
		cells[2] = new Cell(new Block(color, false), position3);
		}
		
		
		
	@ Override
	public Cell[] getCells()
		{
		return AbstractShape.getCells(cells);
		}
		
		
		
	@ Override
	public void shiftDown()
		{
		position.setRow(position.row() + 1);
		AbstractShape.shiftDown(cells[0]);
		AbstractShape.shiftDown(cells[1]);
		AbstractShape.shiftDown(cells[2]);
		}
		
		
		
	@ Override
	public void shiftLeft()
		{
		position.setRow(position.col() - 1);
		AbstractShape.shiftLeft(cells[0]);
		AbstractShape.shiftLeft(cells[1]);
		AbstractShape.shiftLeft(cells[2]);
		}
		
		
		
	@ Override
	public void shiftRight()
		{
		position.setRow(position.col() + 1);
		AbstractShape.shiftRight(cells[0]);
		AbstractShape.shiftRight(cells[1]);
		AbstractShape.shiftRight(cells[2]);
		}
		
		
		
	@ Override
	public void transform()
		{
		if (transformCount % 4 == 0)
			{
			cells[1].setRow(cells[1].getRow() - 1);
			cells[1].setRow(cells[1].getCol() + 1);
			cells[2].setRow(cells[2].getRow() - 2);
			cells[2].setRow(cells[2].getCol() + 2);
			}
		if (transformCount % 4 == 1)
			{
			cells[1].setRow(cells[1].getRow() - 1);
			cells[1].setRow(cells[1].getCol() - 1);
			cells[2].setRow(cells[2].getRow() - 2);
			cells[2].setRow(cells[2].getCol() - 2);
			}
		if (transformCount % 4 == 2)
			{
			cells[1].setRow(cells[1].getRow() + 1);
			cells[1].setRow(cells[1].getCol() - 1);
			cells[2].setRow(cells[2].getRow() + 2);
			cells[2].setRow(cells[2].getCol() - 2);
			}
		if (transformCount % 4 == 3)
			{
			cells[1].setRow(cells[1].getRow() + 1);
			cells[1].setRow(cells[1].getCol() + 1);
			cells[2].setRow(cells[2].getRow() + 2);
			cells[2].setRow(cells[2].getCol() + 2);
			}
		transformCount++;
		}
		
		
		
	@ Override
	public void cycle()
		{
		AbstractShape.cycle(color, cells[0], cells[1]);
		AbstractShape.cycle(color, cells[1], cells[2]);
		AbstractShape.cycle(color, cells[2], cells[0]);
		}
		
		
		
	@ Override
	public AbstractShape cloneMe()
		{
		IShape c = (IShape) super.clone();
		c.cells = new Cell[3];
		c.cells[0] = new Cell(cells[0]);
		c.cells[1] = new Cell(cells[1]);
		c.cells[2] = new Cell(cells[2]);
		c.position = new Position(position);
		
		/* some operations */
		return c;
		}
	}
